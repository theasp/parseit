#+TITLE: Parseit

* Introduction
Parseit is command line tool to parse data using [[https://en.wikipedia.org/wiki/Extended_Backus%25E2%2580%2593Naur_form][EBNF]] or [[https://en.wikipedia.org/wiki/Augmented_Backus%25E2%2580%2593Naur_form][ABNF]] using the excellent [[https://github.com/Engelberg/instaparse][Instaparse]] library, and serializing the result into [[https://www.json.org/json-en.html][JSON]], [[https://github.com/edn-format/edn][EDN]], [[https://yaml.org/][YAML]] or [[https://github.com/cognitect/transit-format][Transit]] format.

* Usage
#+begin_example
Usage: parseit [options] <grammar> [input]
       parseit [options] --preset <preset> [input]
       parseit --help

Options
  -p, --preset PRESET        none    Preset grammar to use
  -f, --format FORMAT        json    Select the output format
  -s, --start RULE                   Start processing at this rule
  -t, --transform RULE:TYPE          Transform a rule into a type
  -T, --no-standard-tx               Do use the standard transformations
  -S, --style TYPE           hiccup  Build the parsed tree in the style of hiccup or enlive
  -h, --help                         Help

Output Formats
  edn
  json
  transit
  yaml

Transformation Types
  decimal, float, number
    Convert to floating point
  int, integer
    Convert to integer
  array, list, vec
    Create list from children
  dict, map, object
    Create map from children
  string, text
    Convert to string

Presets
  csv
  passwd
#+end_example

* Example
** Parsing ~passwd~

You can parse ~passwd~ entries using the following as ~passwd.ebnf~:
#+NAME: passwd-ebnf
#+HEADER: :exports code
#+HEADER: :results silent
#+HEADER: :tangle passwd.ebnf
#+BEGIN_SRC conf
passwd = (user)*
user = name <SEP> pw <SEP> uid <SEP> gid <SEP> gecos <SEP> home <SEP> shell <EOL>
name = STRING
pw = STRING
uid = INTEGER
gid = INTEGER
gecos = STRING?
home = STRING
shell = STRING
STRING = #'[^:\r\n]+'
INTEGER = SIGN? DIGITS EXPONENT?
<EXPONENT> = 'e' DIGITS
<SIGN> = '+' | '-'
<DIGITS> = #'[0-9]+'
SEP = ':'
EOL = #'(?:\r\n|\r|\n)'
#+END_SRC

We will use ~getent passwd root~ to get the entry for the root user:
#+begin_example
$ getent passwd root
root:x:0:0:root:/root:/bin/bash
#+end_example

We can then pipe that into Parseit and see the result:
#+begin_example
$ getent passwd root | parseit passwd.ebnf 
["passwd",["user",["name","root"],["pw","x"],["uid",0],["gid",0],["gecos","root"],["home","/root"],["shell","/bin/bash"]]]
#+end_example

Not a bad start!  You will notice that the UID and GID values were converted into integers.  There is a library of standard transformations and the ~INTEGER~ rule will be transformed into an integer, and the ~STRING~ rule will be turned into a string.  You can avoid this by using ~--no-standard-tx~:
#+begin_example
$ getent passwd root | node target/parseit.js --no-standard-tx passwd.ebnf 
["passwd",["user",["name",["STRING","root"]],["pw",["STRING","x"]],["uid",["INTEGER","0"]],["gid",["INTEGER","0"]],["gecos",["STRING","root"]],["home",["STRING","/root"]],["shell",["STRING","/bin/bash"]]]]
#+end_example

If you use the options ~--transform user:map~ and ~--transform passwd:list~, Parseit will turn the ~user~ rule into a map (dictionary) and ~passwd~ rule into a list of users:
#+BEGIN_EXAMPLE
$ getent passwd root | parseit --transform user:map --transform passwd:list passwd.ebnf 
[{"name":"root","pw":"x","uid":0,"gid":0,"gecos":"root","home":"/root","shell":"/bin/bash"}]
#+END_EXAMPLE

You don't actually need the EBNF file or any of those options though!  There is a ~passwd~ preset which does it all for your:
#+begin_example
$ getent passwd root | parseit --preset passwd
[{"name":"root","pw":"x","uid":0,"gid":0,"gecos":"root","home":"/root","shell":"/bin/bash"}]
#+end_example

We are parsing a single user, but it's currently being returned in an array.  We can tell Parseit to start parsing at a specific rule using the argument ~--start rule~:
#+begin_example
$ getent passwd root | parseit --preset passwd --start user
{"name":"root","pw":"x","uid":0,"gid":0,"gecos":"root","home":"/root","shell":"/bin/bash"}
#+end_example

Maybe you don't like reading JSON?  You can use the YAML output format to make it more readable:
#+begin_example
$ getent passwd root | parseit --preset passwd --format yaml
---
- name: root
  pw: x
  uid: 0
  gid: 0
  gecos: root
  home: /root
  shell: /bin/bash
#+end_example

* Grammar

Parseit uses [[https://github.com/Engelberg/instaparse][Instaparse]], so the [[https://github.com/Engelberg/instaparse#notation][notation section of the tutorial]] has a good description of the grammar syntax.  Keep in mind that you will not need to escape strings as you would in Clojure as the grammar will be read out of a text file.

* Building
This will install Shadow CLJS and then build the JavaScript as ~target/parseit.js~ and a native executable (using nexe) as ~parseit~:
#+begin_example
$ npm install -g shadow-cljs
$ npm install --save-dev shadow-cljs
$ shadow-cljs release cli
#+end_example
